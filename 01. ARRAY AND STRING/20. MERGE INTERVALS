import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Main{
    public static int[][] mergeIntervals(int Intervals[][]){
        // write your code here
    
        ArrayList<int[]> ans = new ArrayList<>();
        
        // IF GIVEN INTERVALS ARRAYLIST IS EMPTY   <------------
        
        if(Intervals.length == 0){
            int empty[][] = new int[0][0];
            empty = ans.toArray(empty);
            return empty;
        }
        
        Arrays.sort(Intervals , (a,b) ->{
           return a[0]-b[0]; 
        });
        
        
        ans.add(Intervals[0]);
       
        int i= 1;
        
        while( i < Intervals.length){
              int li = ans.size()-1;
              
            if(Intervals[i][0] < ans.get(li)[1]){
                ans.get(li)[1] = Math.max( ans.get(li)[1] , Intervals[i][1] );
            }
              
              //  THIS CASE ->  Note : If ending time of interval I1 is same as starting time of I2 then both will consider as separate Intervals.  
            
           else if(Intervals[i][0] == ans.get(li)[1]){
               ans.add(Intervals[i]);
            }
            
            else{
                ans.add(Intervals[i]);
            }
            i++;
        }
        int fres[][] = new int[ans.size()][2];
        fres = ans.toArray(fres);
        
        return fres;
    }
    public static void main(String args[]){
        Scanner scn = new Scanner(System.in);

        // Input Format
        int n = scn.nextInt();
        int input[][] = new int[n][2];

        for(int i = 0 ; i <  n ; i++){
            int sp = scn.nextInt();
            int ep = scn.nextInt();

            input[i][0] = sp;
            input[i][1] = ep;
        }

        // Output Format
        int [][]output = mergeIntervals(input);

        System.out.print("[");
        for(int arr[] : output){
            System.out.print(Arrays.toString(arr));
        }
        System.out.println("]");
    }
}
